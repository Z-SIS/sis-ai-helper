name: Monthly Security Audit

on:
  schedule:
    # Run on the first day of every month at 2 AM UTC
    - cron: '0 2 1 * *'
  workflow_dispatch:
    inputs:
      run_full_audit:
        description: 'Run full security audit'
        required: false
        default: 'true'
        type: boolean

jobs:
  security-audit:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Supabase CLI
        run: |
          curl -sSfL https://supabase.com/install.sh | sh
          echo "$HOME/.supabase/bin" >> $GITHUB_PATH

      - name: Run Supabase Security Lint
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}
        run: |
          echo "🔍 Running Supabase security audit..."
          supabase db lint --project-ref $SUPABASE_PROJECT_ID
        continue-on-error: true

      - name: Check RLS Status
        env:
          DATABASE_URL: ${{ secrets.SUPABASE_DB_URL }}
        run: |
          echo "📊 Checking RLS status on all public tables..."
          node -e "
          const { Client } = require('pg');
          const client = new Client({ connectionString: process.env.DATABASE_URL });
          
          client.connect().then(async () => {
            const result = await client.query(\`
              SELECT 
                schemaname,
                tablename,
                rowsecurity as rls_enabled
              FROM pg_tables 
              WHERE schemaname = 'public'
              ORDER BY tablename
            \`);
            
            console.log('📋 RLS Status Report:');
            let allEnabled = true;
            result.rows.forEach(row => {
              const status = row.rls_enabled ? '✅ ENABLED' : '❌ DISABLED';
              console.log(\`  \${row.tablename}: \${status}\`);
              if (!row.rls_enabled) allEnabled = false;
            });
            
            if (!allEnabled) {
              console.log('⚠️ Some tables have RLS disabled!');
              process.exit(1);
            } else {
              console.log('✅ All tables have RLS enabled');
            }
            
            await client.end();
          }).catch(err => {
            console.error('❌ Database connection failed:', err.message);
            process.exit(1);
          });
          "

      - name: Check Function Security
        env:
          DATABASE_URL: ${{ secrets.SUPABASE_DB_URL }}
        run: |
          echo "🔍 Checking function search_path security..."
          node -e "
          const { Client } = require('pg');
          const client = new Client({ connectionString: process.env.DATABASE_URL });
          
          client.connect().then(async () => {
            const result = await client.query(\`
              SELECT 
                n.nspname AS schema,
                p.proname AS function_name,
                pg_get_function_identity_arguments(p.oid) AS args,
                array_to_string(proconfig, ', ') AS config
              FROM pg_proc p
              JOIN pg_namespace n ON n.oid = p.pronamespace
              WHERE n.nspname = 'public'
              AND p.proname IN ('match_company_research', 'update_updated_at_column')
              ORDER BY p.proname
            \`);
            
            console.log('📋 Function Security Report:');
            let issuesFound = false;
            result.rows.forEach(row => {
              const hasFixedPath = row.config && row.config.includes('search_path');
              const status = hasFixedPath ? '✅ SECURED' : '⚠️ VULNERABLE';
              console.log(\`  \${row.function_name}: \${status}\`);
              if (!hasFixedPath) issuesFound = true;
            });
            
            if (issuesFound) {
              console.log('⚠️ Some functions have mutable search_path!');
              process.exit(1);
            } else {
              console.log('✅ All functions have secure search_path');
            }
            
            await client.end();
          }).catch(err => {
            console.error('❌ Database connection failed:', err.message);
            process.exit(1);
          });
          "

      - name: Check Extension Security
        env:
          DATABASE_URL: ${{ secrets.SUPABASE_DB_URL }}
        run: |
          echo "🔍 Checking extension placement security..."
          node -e "
          const { Client } = require('pg');
          const client = new Client({ connectionString: process.env.DATABASE_URL });
          
          client.connect().then(async () => {
            const result = await client.query(\`
              SELECT 
                e.extname AS extension_name,
                n.nspname AS schema_name
              FROM pg_extension e
              JOIN pg_namespace n ON n.oid = e.extnamespace
              WHERE e.extname IN ('vector', 'uuid-ossp')
              ORDER BY e.extname
            \`);
            
            console.log('📋 Extension Security Report:');
            let issuesFound = false;
            result.rows.forEach(row => {
              const isSecure = row.schema_name !== 'public';
              const status = isSecure ? '✅ SECURE' : '⚠️ IN PUBLIC';
              console.log(\`  \${row.extension_name}: \${status} (schema: \${row.schema_name})\`);
              if (!isSecure) issuesFound = true;
            });
            
            if (issuesFound) {
              console.log('⚠️ Some extensions are in public schema!');
              process.exit(1);
            } else {
              console.log('✅ All extensions are in secure schemas');
            }
            
            await client.end();
          }).catch(err => {
            console.error('❌ Database connection failed:', err.message);
            process.exit(1);
          });
          "

      - name: Generate Security Report
        if: always()
        run: |
          echo "📊 Generating security audit report..."
          cat > security-audit-report.md << 'EOF'
          # Security Audit Report
          
          **Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          **Trigger:** ${{ github.event_name }}
          
          ## Summary
          This automated security audit checks:
          - Row Level Security (RLS) status on all public tables
          - Function search_path security
          - Extension placement security
          
          ## Results
          - ✅ RLS checks completed
          - ✅ Function security checks completed  
          - ✅ Extension security checks completed
          
          ## Recommendations
          - Review any failed checks above
          - Apply security fixes as needed
          - Schedule regular security audits
          
          ---
          *Generated by GitHub Actions*
          EOF

      - name: Upload Security Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-audit-report
          path: security-audit-report.md
          retention-days: 90

      - name: Create Issue on Failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🚨 Security Audit Failed',
              body: `The monthly security audit failed on ${new Date().toISOString()}.
              
              Please review the workflow logs and address the security issues identified.
              
              **Workflow:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
              
              This issue was automatically created by the security audit workflow.`,
              labels: ['security', 'urgent', 'automated']
            })

      - name: Notify Success
        if: success()
        run: |
          echo "🎉 Security audit completed successfully!"
          echo "📊 All security checks passed"
          echo "📝 Report uploaded as artifact"